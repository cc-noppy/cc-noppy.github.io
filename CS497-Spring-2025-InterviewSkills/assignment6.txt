Francis Lorenz Rosas
Assignment 6

1) Uses Python. BFS/DFS to Find Path in Undirected Graph

from collections import deque, defaultdict

def valid_path(n, edges, source, destination):
    graph = defaultdict(list)
    for u, v in edges:
        graph[u].append(v)
        graph[v].append(u)

    visited = set()
    queue = deque([source])
    
    while queue:
        node = queue.popleft()
        if node == destination:
            return True
        if node in visited:
            continue
        visited.add(node)
        for neighbor in graph[node]:
            if neighbor not in visited:
                queue.append(neighbor)
    return False

This is a classic BFS/DFS.

Steps:
-    Construct adjacency list from edge list
-    Use BFS to check connectivity from source
-    Track visited nodes to prevent loops
-    Return true if destination reached

Time complexity:
-    Time: O(V + E) where V = nodes and E = edges
-    Space: O(V)

--------------------------------------------------------------------

2) Uses Python. DFS to Find Longest Cycle in Directed Graph

def longest_cycle(edges):
    n = len(edges)
    visited = [False] * n
    longest = -1

    def dfs(node, depth_map, depth):
        nonlocal longest
        if node == -1:
            return
        if visited[node]:
            if node in depth_map:
                longest = max(longest, depth - depth_map[node])
            return
        visited[node] = True
        depth_map[node] = depth
        dfs(edges[node], depth_map, depth + 1)
        depth_map.pop(node)

    for i in range(n):
        if not visited[i]:
            dfs(i, {}, 0)
    return longest

Steps:
-    Use DFS and map to track depth of path
-    If node already in map: cycle found
-    Track max cycle length
-    Mark nodes as visited after full exploration

Time complexity:
-    Time: O(n)
-    Space: O(n)

------------------------------------------------------------------

3) Uses Python. Kruskalâ€™s Algorithm for Minimum Cost to Connect All Cities

def minimum_cost(N, connections):
    parent = list(range(N + 1))

    def find(x):
        if parent[x] != x:
            parent[x] = find(parent[x])
        return parent[x]

    def union(x, y):
        px, py = find(x), find(y)
        if px == py:
            return False
        parent[py] = px
        return True

    connections.sort(key=lambda x: x[2])
    cost = 0
    edges_used = 0

    for u, v, w in connections:
        if union(u, v):
            cost += w
            edges_used += 1
            if edges_used == N - 1:
                return cost

    return -1

Steps:
-    Sort connections by cost
-    Use Union-Find to connect cities and avoid cycles
-    Track total cost and number of used edges
-    Return -1 if not all cities connected

Time complexity:
    Time: O(ElogE)
    Space: O(n)


-----------------------------------------------------

4) Uses Python. DFS to Find All Paths from Source to Target in DAG

def all_paths_source_target(graph):
    result = []
    path = []

    def dfs(node):
        path.append(node)
        if node == len(graph) - 1:
            result.append(path[:])
        else:
            for neighbor in graph[node]:
                dfs(neighbor)
        path.pop()

    dfs(0)
    return result

Steps:
-    DFS from node 0, storing path history
-    On reaching target (n - 1), append path
-    Backtrack to explore other branches
-    Collect all paths

Time complexity:

-    Time: O(2^n)
-    Space: O(n)


------------------------------------------------------

5) Uses Python. Fast Exponentiation to Compute Power Function

def my_pow(x, n):
    def fast_pow(base, exp):
        if exp == 0:
            return 1
        half = fast_pow(base, exp // 2)
        return half * half if exp % 2 == 0 else half * half * base

    return fast_pow(x, n) if n >= 0 else 1 / fast_pow(x, -n)

Steps:
- We ultimately use divide and conquer:
    -    x^n = (x^(n/2))^2 if n even
    -    x^n = x * (x^(n/2))^2 if n odd

- Handle negative exponents with reciprocal

Time complexity:
-    Time: O(log n)
-    Space: O(log n)
